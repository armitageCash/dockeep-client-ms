name: Deploy to ECS fargate

on:
  push:
    branches:
      - main
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_SERVICE: dockeep-clients-ms-service
  ECS_CLUSTER: dockeep-clients-ms-cluster
  ECS_TASK_DEFINITION: dockeep-clients-ms-task-definition
  CONTAINER_NAME: dockeep-clients-ms-container          

jobs:
  create-docker-image:
    name: Build docker
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Configurar Credenciales de AWS
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Loggin into AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Create and add tags to docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    name: Upload image to AWS ECR
    runs-on: ubuntu-latest
    needs: create-docker-image
    steps:
      - name: Configurar Credenciales de AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
 
      - name: Update ECS service
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --task-definition ${{ env.ECS_TASK_DEFINITION }} --force-new-deployment
  integrate-openapi:
    name: Integrate OpenAPI
    runs-on: ubuntu-latest
    needs: deploy  # Espera a que se complete el paso 'deploy'
    env:
      APP_ID: ${{ steps.import-openapi.outputs.api-id }}  # Almacena el ID de la API importada
    steps:
      - name: Import OpenAPI
        id: import-openapi
        run: |
          # Comando para importar la definici√≥n OpenAPI y obtener el ID de la API
          api_id=$(aws apigateway import-rest-api --body file:///api-definition/main.yml --query 'id' --output text)
          echo "::set-output name=api-id::$api_id"
      
      - name: Create or Update API Gateway
        run: |
          aws apigateway create-or-update-api --rest-api-id ${{ env.APP_ID }} --mode merge --fail-on-warnings

      - name: Create Deployment
        run: |
          aws apigateway create-deployment --rest-api-id ${{ env.APP_ID }} --stage-name production --description despliegue-dockeep-clients-ms  