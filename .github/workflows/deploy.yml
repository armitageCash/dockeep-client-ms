name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_TASK_DEFINITION: task-definition.json
  CONTAINER_NAME: dockeep-clients-ms-container
  S3_BUCKET_NAME: dockeep-cloudformation-templates # Reemplaza con el nombre de tu bucket S3

jobs:
  deploy:
    name: Deploy Workflow
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check if CloudFormation template is different
        id: check-diff
        run: |
          local_hash=$(shasum -a 256 ./cloudformation/ecs-stack.yml | awk '{print $1}')
          s3_hash=$(aws s3api head-object --bucket $S3_BUCKET_NAME --key ecs-stack.yml --query 'ETag' --output text)
          if [ "$local_hash" != "$s3_hash" ]; then
            echo "File is different, uploading..."
            echo "::set-output name=upload_template::true"
          else
            echo "File is the same, no need to upload."
            echo "::set-output name=upload_template::false"
          fi

      - name: Upload CloudFormation template to S3
        if: steps.check-diff.outputs.upload_template == 'true'
        run: |
          aws s3 cp ./cloudformation/ecs-stack.yml s3://$S3_BUCKET_NAME/ecs-stack.yml

  build-stack-ecs:
    name: Build Stack ECS
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Check if CloudFormation template needs update
        id: check-template-update
        run: |
          aws s3api head-object --bucket $S3_BUCKET_NAME --key ecs-stack.yml || exit 1
          echo "::set-output name=template_exists::true"
        continue-on-error: true

      - name: Update CloudFormation Stack
        if: steps.check-template-update.outputs.template_exists == 'true'
        run: |
          aws cloudformation create-stack \
            --stack-name dockeep-clients-ms-ecs-stack \
            --template-url https://$S3_BUCKET_NAME.s3.amazonaws.com/ecs-stack.yml \
            --capabilities CAPABILITY_NAMED_IAM
          aws cloudformation wait stack-create-complete \
            --stack-name dockeep-clients-ms-ecs-stack
          service_arn=$(aws ecs describe-services \
            --cluster dockeep-clients-cluster \
            --service dockeep-clients-service \
            --query 'services[0].serviceArn' \
            --output text)
          echo "Service ARN: $service_arn"

  deploy-ecs:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build-stack-ecs
    environment: production
    steps:
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: dockeep-clients-service
          cluster: dockeep-clients-cluster
          wait-for-service-stability: true
