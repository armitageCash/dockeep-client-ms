name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  S3_BUCKET_NAME: dockeep-cloudformation-templates
  OBJECT_KEY: ecs-stack.yml  # Nombre del objeto que deseas verificar
  LOCAL_FILE_PATH: ./cloudformation/ecs-stack.yml  # Ruta local al archivo

jobs:
  deploy:
    name: Deploy Workflow
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Calculate local file hash
        id: local-file-hash
        run: |
          echo "::set-output name=hash::$(sha256sum ${{ env.LOCAL_FILE_PATH }} | awk '{print $1}')"

      - name: Check if S3 object exists
        id: check-s3-object
        run: |
          # Verifica si el objeto existe en el bucket de S3
          if ! aws s3 ls s3://${{ env.S3_BUCKET_NAME }}/${{ env.OBJECT_KEY }}; then
            # El objeto no existe, intenta crearlo en S3
            if ! aws s3 cp ${{ env.LOCAL_FILE_PATH }} s3://${{ env.S3_BUCKET_NAME }}/${{ env.OBJECT_KEY }}; then
              echo "Failed to create S3 object."
              exit 1
            fi
          fi

      - name: Compare file hashes
        id: compare-hashes
        run: |
          local_hash=${{ steps.local-file-hash.outputs.hash }}
          s3_hash=$(aws s3api head-object --bucket ${{ env.S3_BUCKET_NAME }} --key ${{ env.OBJECT_KEY }} --query 'ETag' --output text)
          if [ "$local_hash" != "$s3_hash" ] && !$s3_hash; then
            echo "File has changed, uploading to S3"
            # Upload the file to S3 because the hashes are different
            aws s3 cp ${{ env.LOCAL_FILE_PATH }} s3://${{ env.S3_BUCKET_NAME }}/${{ env.OBJECT_KEY }}
          else
            echo "File has not changed, skipping S3 upload"
          fi

      - name: Deploy ECS stack
        if: steps.compare-hashes.outputs.stdout == ''
        run: |
          # Intenta crear la pila de CloudFormation, maneja la excepción si ya existe
          set +e
          aws cloudformation create-stack \
            --stack-name dockeep-clients-ms-ecs-stack \
            --template-url https://${{ env.S3_BUCKET_NAME }}.s3.${{ env.AWS_REGION }}.amazonaws.com/${{ env.OBJECT_KEY }} \
            --capabilities CAPABILITY_NAMED_IAM
          create_stack_exit_code=$?
          set -e

          if [ $create_stack_exit_code -eq 254 ]; then
            # El stack ya existe, puedes manejarlo aquí
            echo "Stack already exists. Continuing..."
          elif [ $create_stack_exit_code -ne 0 ]; then
            echo "Failed to create CloudFormation stack."
            exit 1
          fi

      - name: Wait for stack creation
        run: |
          # Espera a que se complete la creación de la pila
          aws cloudformation wait stack-create-complete \
            --stack-name dockeep-clients-ms-ecs-stack

      - name: Get ECS Service ARN
        id: get-service-arn
        run: |
          service_arn=$(aws ecs describe-services \
            --cluster dockeep-clients-cluster \
            --service dockeep-clients-service \
            --query 'services[0].serviceArn' \
            --output text)
          echo "Service ARN: $service_arn"
